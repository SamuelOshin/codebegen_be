# Pytest configuration
"""
Pytest configuration and fixtures for testing the codebegen application.
Provides database, authentication, and AI model mocks.
"""

import pytest
import asyncio
from typing import Generator, AsyncGenerator
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from fastapi.testclient import TestClient
from httpx import AsyncClient

from app.main import app
from app.core.database import get_db, Base
from app.core.config import Settings, get_settings
from app.auth.dependencies import get_current_user
from app.schemas.user import User

# Test database
TEST_DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(TEST_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_test_settings():
    return Settings(
        DATABASE_URL=TEST_DATABASE_URL,
        SECRET_KEY="test-secret-key",
        ENVIRONMENT="testing"
    )

@pytest.fixture(scope="session")
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def db() -> Generator:
    """Create a test database session"""
    Base.metadata.create_all(bind=engine)
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()
        Base.metadata.drop_all(bind=engine)

@pytest.fixture
def test_user() -> User:
    """Create a test user"""
    return User(
        id="test-user-123",
        email="test@example.com",
        username="testuser",
        is_active=True
    )

@pytest.fixture
def client(db, test_user) -> Generator:
    """Create a test client with overrides"""
    
    def override_get_db():
        try:
            yield db
        finally:
            pass
    
    def override_get_current_user():
        return test_user
    
    app.dependency_overrides[get_db] = override_get_db
    app.dependency_overrides[get_current_user] = override_get_current_user
    app.dependency_overrides[get_settings] = get_test_settings
    
    with TestClient(app) as c:
        yield c
    
    app.dependency_overrides.clear()

@pytest.fixture
async def async_client(db, test_user) -> AsyncGenerator:
    """Create an async test client"""
    
    def override_get_db():
        try:
            yield db
        finally:
            pass
    
    def override_get_current_user():
        return test_user
    
    app.dependency_overrides[get_db] = override_get_db
    app.dependency_overrides[get_current_user] = override_get_current_user
    app.dependency_overrides[get_settings] = get_test_settings
    
    async with AsyncClient(app=app, base_url="http://testserver") as ac:
        yield ac
    
    app.dependency_overrides.clear()

# Mock AI models for testing
class MockAIOrchestrator:
    async def initialize(self):
        pass
    
    async def generate_project(self, request):
        return {
            "files": {
                "app/main.py": "# Mock FastAPI app\nfrom fastapi import FastAPI\napp = FastAPI()",
                "app/models/user.py": "# Mock user model",
                "README.md": "# Mock Project\nGenerated by codebegen"
            },
            "schema": {"User": {"fields": {"id": "int", "email": "str"}}},
            "review_feedback": {"issues": [], "suggestions": []},
            "documentation": {"readme": "Mock documentation"},
            "quality_score": 0.95
        }
    
    async def cleanup(self):
        pass

@pytest.fixture
def mock_ai_orchestrator(monkeypatch):
    """Mock the AI orchestrator for testing"""
    mock = MockAIOrchestrator()
    monkeypatch.setattr("app.main.AIOrchestrator", lambda: mock)
    return mock